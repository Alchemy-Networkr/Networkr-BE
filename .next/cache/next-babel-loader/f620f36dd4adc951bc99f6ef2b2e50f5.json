{"ast":null,"code":"var _temp;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst pool = require('../utils/pool');\n\nconst PortfolioComment = require('./portfolio-comment');\n\nmodule.exports = (_temp = class PortfolioProject {\n  constructor(row) {\n    _defineProperty(this, \"portfolioId\", void 0);\n\n    _defineProperty(this, \"ownerEmail\", void 0);\n\n    _defineProperty(this, \"title\", void 0);\n\n    _defineProperty(this, \"primaryLanguage\", void 0);\n\n    _defineProperty(this, \"date\", void 0);\n\n    _defineProperty(this, \"githubLink\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"collaborators\", void 0);\n\n    _defineProperty(this, \"open\", void 0);\n\n    this.portfolioId = row.portfolio_id;\n    this.ownerEmail = row.owner_email;\n    this.title = row.title;\n    this.primaryLanguage = row.primary_language;\n    this.date = row.date;\n    this.githubLink = row.github_link;\n    this.description = row.description;\n    this.collaborators = row.collaborators;\n    this.open = row.open;\n  }\n\n  static async insert(project) {\n    const {\n      rows\n    } = await pool.query('INSERT INTO portfolio_projects (owner_email, title, primary_language, \"date\", github_link, \"description\", collaborators, \"open\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *', [project.ownerEmail, project.title, project.primaryLanguage, project.date, project.githubLink, project.description, project.collaborators, project.open]);\n    return new PortfolioProject(rows[0]);\n  }\n\n  static async findById(id) {\n    const {\n      rows\n    } = await pool.query(`SELECT portfolio_projects.*, array_to_json(array_agg(portfolio_comments.comment)) AS comments FROM portfolio_projects\n        JOIN portfolio_comments\n        ON portfolio_comments.portfolio_id=portfolio_projects.portfolio_id\n        WHERE portfolio_projects.portfolio_id=$1\n        GROUP BY portfolio_projects.portfolio_id`, [id]);\n\n    if (rows[0]) {\n      const initialReturn = new PortfolioProject(rows[0]);\n      const comments = rows[0].comments.map(comment => new PortfolioComment(comment));\n      return _objectSpread(_objectSpread({}, initialReturn), {}, {\n        comments\n      });\n    } else {\n      const {\n        rows\n      } = await pool.query('SELECT * FROM portfolio_projects WHERE portfolio_projects.portfolio_id=$1', [id]);\n      return new PortfolioProject(rows[0]);\n    }\n  }\n\n  static async find() {\n    const {\n      rows\n    } = await pool.query('SELECT * FROM portfolio_projects');\n    return rows.map(row => new PortfolioProject(row));\n  }\n\n  static async delete(id) {\n    const {\n      rows\n    } = await pool.query('DELETE FROM portfolio_projects WHERE portfolio_id=$1 RETURNING *', [id]);\n    return new PortfolioProject(rows[0]);\n  }\n\n  static async update(id, updatedProject) {\n    const {\n      rows\n    } = await pool.query(`UPDATE portfolio_projects \n          SET title=$1, \n              primary_language=$2,\n              github_link=$3,\n              \"description\"=$4,\n              collaborators=$5,\n              \"open\"=$6\n          WHERE portfolio_id=$7\n          RETURNING *`, [updatedProject.title, updatedProject.primaryLanguage, updatedProject.githubLink, updatedProject.description, updatedProject.collaborators, updatedProject.open, id]);\n    return new PortfolioProject(rows[0]);\n  }\n\n}, _temp);","map":{"version":3,"sources":["C:/Users/cuele/alchemy/career-track/Networkr-BE/lib/models/portfolio-model.js"],"names":["pool","require","PortfolioComment","module","exports","PortfolioProject","constructor","row","portfolioId","portfolio_id","ownerEmail","owner_email","title","primaryLanguage","primary_language","date","githubLink","github_link","description","collaborators","open","insert","project","rows","query","findById","id","initialReturn","comments","map","comment","find","delete","update","updatedProject"],"mappings":"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","sourcesContent":["const pool = require('../utils/pool');\r\nconst PortfolioComment = require('./portfolio-comment');\r\n\r\nmodule.exports = class PortfolioProject {\r\n    portfolioId;\r\n    ownerEmail;\r\n    title;\r\n    primaryLanguage;\r\n    date;\r\n    githubLink;\r\n    description;\r\n    collaborators;\r\n    open;\r\n\r\n    constructor(row) {\r\n      this.portfolioId = row.portfolio_id;\r\n      this.ownerEmail = row.owner_email;\r\n      this.title = row.title;\r\n      this.primaryLanguage = row.primary_language;\r\n      this.date = row.date;\r\n      this.githubLink = row.github_link;\r\n      this.description = row.description;\r\n      this.collaborators = row.collaborators;\r\n      this.open = row.open;\r\n      \r\n    }\r\n\r\n    static async insert(project) {\r\n      const { rows } = await pool.query(\r\n        'INSERT INTO portfolio_projects (owner_email, title, primary_language, \"date\", github_link, \"description\", collaborators, \"open\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *', [project.ownerEmail, project.title, project.primaryLanguage, project.date, project.githubLink, project.description, project.collaborators, project.open]\r\n      );\r\n\r\n      return new PortfolioProject(rows[0]);\r\n    }\r\n\r\n    static async findById(id) {\r\n      const { rows } = await pool.query(\r\n        `SELECT portfolio_projects.*, array_to_json(array_agg(portfolio_comments.comment)) AS comments FROM portfolio_projects\r\n        JOIN portfolio_comments\r\n        ON portfolio_comments.portfolio_id=portfolio_projects.portfolio_id\r\n        WHERE portfolio_projects.portfolio_id=$1\r\n        GROUP BY portfolio_projects.portfolio_id`,\r\n        [id]\r\n      );\r\n      \r\n      if(rows[0]){\r\n        const initialReturn = new PortfolioProject(rows[0]);\r\n        \r\n        const comments = rows[0].comments.map(comment => new PortfolioComment(comment));\r\n\r\n        return { ...initialReturn, comments };\r\n      } else {\r\n        const { rows } = await pool.query('SELECT * FROM portfolio_projects WHERE portfolio_projects.portfolio_id=$1', [id]);\r\n        return new PortfolioProject(rows[0]);\r\n      }\r\n    } \r\n\r\n    static async find() {\r\n      const { rows } = await pool.query(\r\n        'SELECT * FROM portfolio_projects'\r\n      );\r\n\r\n      return rows.map(row => new PortfolioProject(row));\r\n    }\r\n\r\n    static async delete(id) {\r\n      const { rows } = await pool.query(\r\n        'DELETE FROM portfolio_projects WHERE portfolio_id=$1 RETURNING *',\r\n        [id]\r\n      );\r\n\r\n      return new PortfolioProject(rows[0]);\r\n    }\r\n\r\n    static async update(id, updatedProject) {\r\n      const { rows } = await pool.query(\r\n        `UPDATE portfolio_projects \r\n          SET title=$1, \r\n              primary_language=$2,\r\n              github_link=$3,\r\n              \"description\"=$4,\r\n              collaborators=$5,\r\n              \"open\"=$6\r\n          WHERE portfolio_id=$7\r\n          RETURNING *`,\r\n        [updatedProject.title, updatedProject.primaryLanguage, updatedProject.githubLink, updatedProject.description, updatedProject.collaborators, updatedProject.open, id]\r\n      );\r\n\r\n      return new PortfolioProject(rows[0]);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}