{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _temp;\n\nvar pool = require('../utils/pool');\n\nmodule.exports = (_temp = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function CurriculumComment(comment) {\n    _classCallCheck(this, CurriculumComment);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"ownerEmail\", void 0);\n\n    _defineProperty(this, \"comment\", void 0);\n\n    _defineProperty(this, \"curriculumId\", void 0);\n\n    this.id = comment.id;\n    this.ownerEmail = comment.owner_email;\n    this.comment = comment.comment;\n    this.curriculumId = comment.curriculum_id;\n  }\n\n  _createClass(CurriculumComment, null, [{\n    key: \"insert\",\n    value: function () {\n      var _insert = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(comment) {\n        var _yield$pool$query, rows;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return pool.query('INSERT INTO curriculum_comments (owner_email, comment, curriculum_id) VALUES ($1, $2, $3) RETURNING *', [comment.ownerEmail, comment.comment, comment.curriculumId]);\n\n              case 2:\n                _yield$pool$query = _context.sent;\n                rows = _yield$pool$query.rows;\n                return _context.abrupt(\"return\", new CurriculumComment(rows[0]));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function insert(_x) {\n        return _insert.apply(this, arguments);\n      }\n\n      return insert;\n    }()\n  }, {\n    key: \"findAll\",\n    value: function () {\n      var _findAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _yield$pool$query2, rows;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return pool.query('SELECT * FROM curriculum_comments');\n\n              case 2:\n                _yield$pool$query2 = _context2.sent;\n                rows = _yield$pool$query2.rows;\n                return _context2.abrupt(\"return\", rows.map(function (comment) {\n                  return new CurriculumComment(comment);\n                }));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function findAll() {\n        return _findAll.apply(this, arguments);\n      }\n\n      return findAll;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n        var _yield$pool$query3, rows;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return pool.query('DELETE FROM curriculum_comments WHERE id=$1 RETURNING *', [id]);\n\n              case 2:\n                _yield$pool$query3 = _context3.sent;\n                rows = _yield$pool$query3.rows;\n\n                if (rows[0]) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 8:\n                return _context3.abrupt(\"return\", new CurriculumComment(rows[0]));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function _delete(_x2) {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id, comment) {\n        var _yield$pool$query4, rows;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return pool.query(\"\\n    UPDATE curriculum_comments\\n      SET comment=$1\\n      WHERE id=$2\\n      RETURNING *\\n    \", [comment, id]);\n\n              case 2:\n                _yield$pool$query4 = _context4.sent;\n                rows = _yield$pool$query4.rows;\n                return _context4.abrupt(\"return\", new CurriculumComment(rows[0]));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function update(_x3, _x4) {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  }]);\n\n  return CurriculumComment;\n}(), _temp);","map":{"version":3,"sources":["C:/Users/cuele/alchemy/career-track/Networkr-BE/lib/models/curriculum-comment.js"],"names":["pool","require","module","exports","comment","id","ownerEmail","owner_email","curriculumId","curriculum_id","query","rows","CurriculumComment","map"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP;AAAA;;AAME,6BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,SAAKC,EAAL,GAAUD,OAAO,CAACC,EAAlB;AACA,SAAKC,UAAL,GAAkBF,OAAO,CAACG,WAA1B;AACA,SAAKH,OAAL,GAAeA,OAAO,CAACA,OAAvB;AACA,SAAKI,YAAL,GAAoBJ,OAAO,CAACK,aAA5B;AACD;;AAXH;AAAA;AAAA;AAAA,8FAasBL,OAbtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAe2BJ,IAAI,CAACU,KAAL,CACrB,uGADqB,EAErB,CAACN,OAAO,CAACE,UAAT,EAAqBF,OAAO,CAACA,OAA7B,EAAsCA,OAAO,CAACI,YAA9C,CAFqB,CAf3B;;AAAA;AAAA;AAeYG,gBAAAA,IAfZ,qBAeYA,IAfZ;AAAA,iDAoBW,IAAIC,iBAAJ,CAAsBD,IAAI,CAAC,CAAD,CAA1B,CApBX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAwB2BX,IAAI,CAACU,KAAL,CACrB,mCADqB,CAxB3B;;AAAA;AAAA;AAwBYC,gBAAAA,IAxBZ,sBAwBYA,IAxBZ;AAAA,kDA4BWA,IAAI,CAACE,GAAL,CAAS,UAAAT,OAAO;AAAA,yBAAI,IAAIQ,iBAAJ,CAAsBR,OAAtB,CAAJ;AAAA,iBAAhB,CA5BX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gGA+BsBC,EA/BtB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAgC2BL,IAAI,CAACU,KAAL,CACrB,yDADqB,EAErB,CAACL,EAAD,CAFqB,CAhC3B;;AAAA;AAAA;AAgCYM,gBAAAA,IAhCZ,sBAgCYA,IAhCZ;;AAAA,oBAqCQA,IAAI,CAAC,CAAD,CArCZ;AAAA;AAAA;AAAA;;AAAA,kDAqCwB,IArCxB;;AAAA;AAAA,kDAsCgB,IAAIC,iBAAJ,CAAsBD,IAAI,CAAC,CAAD,CAA1B,CAtChB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+FAyCsBN,EAzCtB,EAyC0BD,OAzC1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA0C2BJ,IAAI,CAACU,KAAL,uGAKpB,CAACN,OAAD,EAAUC,EAAV,CALoB,CA1C3B;;AAAA;AAAA;AA0CYM,gBAAAA,IA1CZ,sBA0CYA,IA1CZ;AAAA,kDAiDW,IAAIC,iBAAJ,CAAsBD,IAAI,CAAC,CAAD,CAA1B,CAjDX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA","sourcesContent":["const pool = require('../utils/pool');\r\n\r\nmodule.exports = class CurriculumComment {\r\n  id;\r\n  ownerEmail;\r\n  comment;\r\n  curriculumId;\r\n\r\n  constructor(comment) {\r\n    this.id = comment.id;\r\n    this.ownerEmail = comment.owner_email;\r\n    this.comment = comment.comment;\r\n    this.curriculumId = comment.curriculum_id;\r\n  } \r\n\r\n  static async insert(comment) {\r\n\r\n    const { rows } = await pool.query(\r\n      'INSERT INTO curriculum_comments (owner_email, comment, curriculum_id) VALUES ($1, $2, $3) RETURNING *',\r\n      [comment.ownerEmail, comment.comment, comment.curriculumId]\r\n    );\r\n\r\n    return new CurriculumComment(rows[0]);\r\n  }\r\n\r\n  static async findAll(){\r\n    const { rows } = await pool.query(\r\n      'SELECT * FROM curriculum_comments'\r\n    );\r\n\r\n    return rows.map(comment => new CurriculumComment(comment));\r\n  }\r\n\r\n  static async delete(id) {\r\n    const { rows } = await pool.query(\r\n      'DELETE FROM curriculum_comments WHERE id=$1 RETURNING *',\r\n      [id]\r\n    );\r\n\r\n    if(!rows[0]) return null;\r\n    else return new CurriculumComment(rows[0]);\r\n  }\r\n\r\n  static async update(id, comment) {\r\n    const { rows } = await pool.query(`\r\n    UPDATE curriculum_comments\r\n      SET comment=$1\r\n      WHERE id=$2\r\n      RETURNING *\r\n    `, [comment, id]);\r\n\r\n    return new CurriculumComment(rows[0]);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}