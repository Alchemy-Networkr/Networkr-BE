{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _temp;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar pool = require('../utils/pool');\n\nvar CurriculumComment = require('./curriculum-comment');\n\nmodule.exports = (_temp = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function CurriculumProject(row) {\n    _classCallCheck(this, CurriculumProject);\n\n    _defineProperty(this, \"curriculum_id\", void 0);\n\n    _defineProperty(this, \"title\", void 0);\n\n    _defineProperty(this, \"github_link\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"group\", void 0);\n\n    _defineProperty(this, \"cohort\", void 0);\n\n    _defineProperty(this, \"tags\", void 0);\n\n    _defineProperty(this, \"deployed_back_end\", void 0);\n\n    _defineProperty(this, \"deployed_front_end\", void 0);\n\n    this.curriculumId = row.curriculum_id, this.title = row.title, this.githubLink = row.github_link, this.description = row.description, this.group = row.group, this.cohort = row.cohort, this.tags = row.tags, this.deployedBackEnd = row.deployed_back_end, this.deployedFrontEnd = row.deployed_front_end;\n  } // Create\n\n\n  _createClass(CurriculumProject, null, [{\n    key: \"insert\",\n    value: function () {\n      var _insert = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(project) {\n        var _yield$pool$query, rows;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return pool.query(\"\\n    INSERT INTO curriculum_projects (title, github_link, \\\"description\\\", \\\"group\\\", cohort, tags, deployed_back_end, deployed_front_end) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *\\n    \", [project.title, project.githubLink, project.description, project.group, project.cohort, project.tags, project.deployedBackEnd, project.deployedFrontEnd]);\n\n              case 2:\n                _yield$pool$query = _context.sent;\n                rows = _yield$pool$query.rows;\n                return _context.abrupt(\"return\", new CurriculumProject(rows[0]));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function insert(_x) {\n        return _insert.apply(this, arguments);\n      }\n\n      return insert;\n    }() // Read - find()\n\n  }, {\n    key: \"find\",\n    value: function () {\n      var _find = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _yield$pool$query2, rows;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return pool.query(\"\\n    SELECT * FROM curriculum_projects\");\n\n              case 2:\n                _yield$pool$query2 = _context2.sent;\n                rows = _yield$pool$query2.rows;\n                return _context2.abrupt(\"return\", rows.map(function (row) {\n                  return new CurriculumProject(row);\n                }));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function find() {\n        return _find.apply(this, arguments);\n      }\n\n      return find;\n    }() // Read - findById()\n\n  }, {\n    key: \"findById\",\n    value: function () {\n      var _findById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n        var _yield$pool$query3, rows, initialReturn, comments, _yield$pool$query4, _rows;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return pool.query(\"SELECT curriculum_projects.*, array_to_json(array_agg(curriculum_comments.comment)) AS comments FROM curriculum_projects\\n        JOIN curriculum_comments\\n        ON curriculum_comments.curriculum_id=curriculum_projects.curriculum_id\\n        WHERE curriculum_projects.curriculum_id=$1\\n        GROUP BY curriculum_projects.curriculum_id\", [id]);\n\n              case 2:\n                _yield$pool$query3 = _context3.sent;\n                rows = _yield$pool$query3.rows;\n\n                if (!rows[0]) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                initialReturn = new CurriculumProject(rows[0]);\n                comments = rows[0].comments.map(function (comment) {\n                  return new CurriculumComment(comment);\n                });\n                return _context3.abrupt(\"return\", _objectSpread(_objectSpread({}, initialReturn), {}, {\n                  comments: comments\n                }));\n\n              case 10:\n                _context3.next = 12;\n                return pool.query('SELECT * FROM curriculum_projects WHERE curriculum_projects.curriculum_id=$1', [id]);\n\n              case 12:\n                _yield$pool$query4 = _context3.sent;\n                _rows = _yield$pool$query4.rows;\n                return _context3.abrupt(\"return\", new CurriculumProject(_rows[0]));\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function findById(_x2) {\n        return _findById.apply(this, arguments);\n      }\n\n      return findById;\n    }() // Update - updateById()\n\n  }, {\n    key: \"updateById\",\n    value: function () {\n      var _updateById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(project, curriculumId) {\n        var _yield$pool$query5, rows;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return pool.query(\"\\n    UPDATE curriculum_projects\\n    SET title=$1, github_link=$2, \\\"description\\\"=$3, \\\"group\\\"=$4, cohort=$5, tags=$6, deployed_back_end=$7, deployed_front_end=$8\\n    WHERE curriculum_id=$9\\n    RETURNING *\\n    \", [project.title, project.githubLink, project.description, project.group, project.cohort, project.tags, project.deployedBackEnd, project.deployedFrontEnd, curriculumId]);\n\n              case 2:\n                _yield$pool$query5 = _context4.sent;\n                rows = _yield$pool$query5.rows;\n\n                if (rows[0]) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 8:\n                return _context4.abrupt(\"return\", new CurriculumProject(rows[0]));\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function updateById(_x3, _x4) {\n        return _updateById.apply(this, arguments);\n      }\n\n      return updateById;\n    }() // Delete - deleteById()\n\n  }, {\n    key: \"deleteById\",\n    value: function () {\n      var _deleteById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(curriculumId) {\n        var _yield$pool$query6, rows;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return pool.query(\"\\n    DELETE FROM curriculum_projects\\n    WHERE curriculum_id=$1\\n    RETURNING *\", [curriculumId]);\n\n              case 2:\n                _yield$pool$query6 = _context5.sent;\n                rows = _yield$pool$query6.rows;\n\n                if (rows[0]) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", null);\n\n              case 8:\n                return _context5.abrupt(\"return\", new CurriculumProject(rows[0]));\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function deleteById(_x5) {\n        return _deleteById.apply(this, arguments);\n      }\n\n      return deleteById;\n    }()\n  }]);\n\n  return CurriculumProject;\n}(), _temp);","map":{"version":3,"sources":["C:/Users/cuele/alchemy/career-track/Networkr-BE/lib/models/curriculum-model.js"],"names":["pool","require","CurriculumComment","module","exports","row","curriculumId","curriculum_id","title","githubLink","github_link","description","group","cohort","tags","deployedBackEnd","deployed_back_end","deployedFrontEnd","deployed_front_end","project","query","rows","CurriculumProject","map","id","initialReturn","comments","comment"],"mappings":"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","sourcesContent":["const pool = require('../utils/pool');\r\nconst CurriculumComment = require('./curriculum-comment');\r\n\r\nmodule.exports = class CurriculumProject {\r\n  curriculum_id;\r\n  title;\r\n  github_link;\r\n  description;\r\n  group;\r\n  cohort;\r\n  tags;\r\n  deployed_back_end;\r\n  deployed_front_end;\r\n\r\n  constructor(row) {\r\n    this.curriculumId = row.curriculum_id,\r\n    this.title = row.title,\r\n    this.githubLink = row.github_link,\r\n    this.description = row.description,\r\n    this.group = row.group,\r\n    this.cohort = row.cohort, \r\n    this.tags = row.tags,\r\n    this.deployedBackEnd = row.deployed_back_end,\r\n    this.deployedFrontEnd = row.deployed_front_end;\r\n  }\r\n\r\n  // Create\r\n  static async insert(project) {\r\n    const { rows } = await pool.query(`\r\n    INSERT INTO curriculum_projects (title, github_link, \"description\", \"group\", cohort, tags, deployed_back_end, deployed_front_end) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *\r\n    `, [project.title, project.githubLink, project.description, project.group, project.cohort, project.tags, project.deployedBackEnd, project.deployedFrontEnd]);\r\n  \r\n    return new CurriculumProject(rows[0]);\r\n  }\r\n  // Read - find()\r\n  static async find() {\r\n    const { rows } = await pool.query(`\r\n    SELECT * FROM curriculum_projects`);\r\n    return rows.map((row) => new CurriculumProject(row));\r\n  }\r\n\r\n  // Read - findById()\r\n  static async findById(id) {\r\n    const { rows } = await pool.query(\r\n      `SELECT curriculum_projects.*, array_to_json(array_agg(curriculum_comments.comment)) AS comments FROM curriculum_projects\r\n        JOIN curriculum_comments\r\n        ON curriculum_comments.curriculum_id=curriculum_projects.curriculum_id\r\n        WHERE curriculum_projects.curriculum_id=$1\r\n        GROUP BY curriculum_projects.curriculum_id`,\r\n      [id]\r\n    );\r\n      \r\n    if(rows[0]){\r\n      const initialReturn = new CurriculumProject(rows[0]);\r\n        \r\n      const comments = rows[0].comments.map(comment => new CurriculumComment(comment));\r\n\r\n      return { ...initialReturn, comments };\r\n    } else {\r\n      const { rows } = await pool.query('SELECT * FROM curriculum_projects WHERE curriculum_projects.curriculum_id=$1', [id]);\r\n      return new CurriculumProject(rows[0]);\r\n    }\r\n  } \r\n\r\n\r\n\r\n  // Update - updateById()\r\n  static async updateById(project, curriculumId) {\r\n    const { rows } = await pool.query(`\r\n    UPDATE curriculum_projects\r\n    SET title=$1, github_link=$2, \"description\"=$3, \"group\"=$4, cohort=$5, tags=$6, deployed_back_end=$7, deployed_front_end=$8\r\n    WHERE curriculum_id=$9\r\n    RETURNING *\r\n    `, [project.title, project.githubLink, project.description, project.group, project.cohort, project.tags, project.deployedBackEnd, project.deployedFrontEnd, curriculumId]);\r\n\r\n    if(!rows[0]) return null;\r\n    else return new CurriculumProject(rows[0]);\r\n  }\r\n\r\n  // Delete - deleteById()\r\n  static async deleteById(curriculumId) {\r\n    const { rows } = await pool.query(`\r\n    DELETE FROM curriculum_projects\r\n    WHERE curriculum_id=$1\r\n    RETURNING *`, [curriculumId]);\r\n\r\n    if(!rows[0]) return null;\r\n    else return new CurriculumProject(rows[0]);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}