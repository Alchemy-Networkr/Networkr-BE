{"ast":null,"code":"var _temp;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst pool = require('../utils/pool');\n\nconst CurriculumComment = require('./curriculum-comment');\n\nmodule.exports = (_temp = class CurriculumProject {\n  constructor(row) {\n    _defineProperty(this, \"curriculum_id\", void 0);\n\n    _defineProperty(this, \"title\", void 0);\n\n    _defineProperty(this, \"github_link\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"group\", void 0);\n\n    _defineProperty(this, \"cohort\", void 0);\n\n    _defineProperty(this, \"tags\", void 0);\n\n    _defineProperty(this, \"deployed_back_end\", void 0);\n\n    _defineProperty(this, \"deployed_front_end\", void 0);\n\n    this.curriculumId = row.curriculum_id, this.title = row.title, this.githubLink = row.github_link, this.description = row.description, this.group = row.group, this.cohort = row.cohort, this.tags = row.tags, this.deployedBackEnd = row.deployed_back_end, this.deployedFrontEnd = row.deployed_front_end;\n  } // Create\n\n\n  static async insert(project) {\n    const {\n      rows\n    } = await pool.query(`\n    INSERT INTO curriculum_projects (title, github_link, \"description\", \"group\", cohort, tags, deployed_back_end, deployed_front_end) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *\n    `, [project.title, project.githubLink, project.description, project.group, project.cohort, project.tags, project.deployedBackEnd, project.deployedFrontEnd]);\n    return new CurriculumProject(rows[0]);\n  } // Read - find()\n\n\n  static async find() {\n    const {\n      rows\n    } = await pool.query(`\n    SELECT * FROM curriculum_projects`);\n    return rows.map(row => new CurriculumProject(row));\n  } // Read - findById()\n\n\n  static async findById(id) {\n    const {\n      rows\n    } = await pool.query(`SELECT curriculum_projects.*, array_to_json(array_agg(curriculum_comments.comment)) AS comments FROM curriculum_projects\n        JOIN curriculum_comments\n        ON curriculum_comments.curriculum_id=curriculum_projects.curriculum_id\n        WHERE curriculum_projects.curriculum_id=$1\n        GROUP BY curriculum_projects.curriculum_id`, [id]);\n\n    if (rows[0]) {\n      const initialReturn = new CurriculumProject(rows[0]);\n      const comments = rows[0].comments.map(comment => new CurriculumComment(comment));\n      return _objectSpread(_objectSpread({}, initialReturn), {}, {\n        comments\n      });\n    } else {\n      const {\n        rows\n      } = await pool.query('SELECT * FROM curriculum_projects WHERE curriculum_projects.curriculum_id=$1', [id]);\n      return new CurriculumProject(rows[0]);\n    }\n  } // Update - updateById()\n\n\n  static async updateById(project, curriculumId) {\n    const {\n      rows\n    } = await pool.query(`\n    UPDATE curriculum_projects\n    SET title=$1, github_link=$2, \"description\"=$3, \"group\"=$4, cohort=$5, tags=$6, deployed_back_end=$7, deployed_front_end=$8\n    WHERE curriculum_id=$9\n    RETURNING *\n    `, [project.title, project.githubLink, project.description, project.group, project.cohort, project.tags, project.deployedBackEnd, project.deployedFrontEnd, curriculumId]);\n    if (!rows[0]) return null;else return new CurriculumProject(rows[0]);\n  } // Delete - deleteById()\n\n\n  static async deleteById(curriculumId) {\n    const {\n      rows\n    } = await pool.query(`\n    DELETE FROM curriculum_projects\n    WHERE curriculum_id=$1\n    RETURNING *`, [curriculumId]);\n    if (!rows[0]) return null;else return new CurriculumProject(rows[0]);\n  }\n\n}, _temp);","map":{"version":3,"sources":["C:/Users/cuele/alchemy/career-track/Networkr-BE/lib/models/curriculum-model.js"],"names":["pool","require","CurriculumComment","module","exports","CurriculumProject","constructor","row","curriculumId","curriculum_id","title","githubLink","github_link","description","group","cohort","tags","deployedBackEnd","deployed_back_end","deployedFrontEnd","deployed_front_end","insert","project","rows","query","find","map","findById","id","initialReturn","comments","comment","updateById","deleteById"],"mappings":";;;;;;;;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAApB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,sBAAD,CAAjC;;AAEAE,MAAM,CAACC,OAAP,YAAiB,MAAMC,iBAAN,CAAwB;AAWvCC,EAAAA,WAAW,CAACC,GAAD,EAAM;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACf,SAAKC,YAAL,GAAoBD,GAAG,CAACE,aAAxB,EACA,KAAKC,KAAL,GAAaH,GAAG,CAACG,KADjB,EAEA,KAAKC,UAAL,GAAkBJ,GAAG,CAACK,WAFtB,EAGA,KAAKC,WAAL,GAAmBN,GAAG,CAACM,WAHvB,EAIA,KAAKC,KAAL,GAAaP,GAAG,CAACO,KAJjB,EAKA,KAAKC,MAAL,GAAcR,GAAG,CAACQ,MALlB,EAMA,KAAKC,IAAL,GAAYT,GAAG,CAACS,IANhB,EAOA,KAAKC,eAAL,GAAuBV,GAAG,CAACW,iBAP3B,EAQA,KAAKC,gBAAL,GAAwBZ,GAAG,CAACa,kBAR5B;AASD,GArBsC,CAuBvC;;;AACA,eAAaC,MAAb,CAAoBC,OAApB,EAA6B;AAC3B,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMvB,IAAI,CAACwB,KAAL,CAAY;;KAAZ,EAEpB,CAACF,OAAO,CAACZ,KAAT,EAAgBY,OAAO,CAACX,UAAxB,EAAoCW,OAAO,CAACT,WAA5C,EAAyDS,OAAO,CAACR,KAAjE,EAAwEQ,OAAO,CAACP,MAAhF,EAAwFO,OAAO,CAACN,IAAhG,EAAsGM,OAAO,CAACL,eAA9G,EAA+HK,OAAO,CAACH,gBAAvI,CAFoB,CAAvB;AAIA,WAAO,IAAId,iBAAJ,CAAsBkB,IAAI,CAAC,CAAD,CAA1B,CAAP;AACD,GA9BsC,CA+BvC;;;AACA,eAAaE,IAAb,GAAoB;AAClB,UAAM;AAAEF,MAAAA;AAAF,QAAW,MAAMvB,IAAI,CAACwB,KAAL,CAAY;sCAAZ,CAAvB;AAEA,WAAOD,IAAI,CAACG,GAAL,CAAUnB,GAAD,IAAS,IAAIF,iBAAJ,CAAsBE,GAAtB,CAAlB,CAAP;AACD,GApCsC,CAsCvC;;;AACA,eAAaoB,QAAb,CAAsBC,EAAtB,EAA0B;AACxB,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMvB,IAAI,CAACwB,KAAL,CACpB;;;;mDADoB,EAMrB,CAACI,EAAD,CANqB,CAAvB;;AASA,QAAGL,IAAI,CAAC,CAAD,CAAP,EAAW;AACT,YAAMM,aAAa,GAAG,IAAIxB,iBAAJ,CAAsBkB,IAAI,CAAC,CAAD,CAA1B,CAAtB;AAEA,YAAMO,QAAQ,GAAGP,IAAI,CAAC,CAAD,CAAJ,CAAQO,QAAR,CAAiBJ,GAAjB,CAAqBK,OAAO,IAAI,IAAI7B,iBAAJ,CAAsB6B,OAAtB,CAAhC,CAAjB;AAEA,6CAAYF,aAAZ;AAA2BC,QAAAA;AAA3B;AACD,KAND,MAMO;AACL,YAAM;AAAEP,QAAAA;AAAF,UAAW,MAAMvB,IAAI,CAACwB,KAAL,CAAW,8EAAX,EAA2F,CAACI,EAAD,CAA3F,CAAvB;AACA,aAAO,IAAIvB,iBAAJ,CAAsBkB,IAAI,CAAC,CAAD,CAA1B,CAAP;AACD;AACF,GA3DsC,CA+DvC;;;AACA,eAAaS,UAAb,CAAwBV,OAAxB,EAAiCd,YAAjC,EAA+C;AAC7C,UAAM;AAAEe,MAAAA;AAAF,QAAW,MAAMvB,IAAI,CAACwB,KAAL,CAAY;;;;;KAAZ,EAKpB,CAACF,OAAO,CAACZ,KAAT,EAAgBY,OAAO,CAACX,UAAxB,EAAoCW,OAAO,CAACT,WAA5C,EAAyDS,OAAO,CAACR,KAAjE,EAAwEQ,OAAO,CAACP,MAAhF,EAAwFO,OAAO,CAACN,IAAhG,EAAsGM,OAAO,CAACL,eAA9G,EAA+HK,OAAO,CAACH,gBAAvI,EAAyJX,YAAzJ,CALoB,CAAvB;AAOA,QAAG,CAACe,IAAI,CAAC,CAAD,CAAR,EAAa,OAAO,IAAP,CAAb,KACK,OAAO,IAAIlB,iBAAJ,CAAsBkB,IAAI,CAAC,CAAD,CAA1B,CAAP;AACN,GA1EsC,CA4EvC;;;AACA,eAAaU,UAAb,CAAwBzB,YAAxB,EAAsC;AACpC,UAAM;AAAEe,MAAAA;AAAF,QAAW,MAAMvB,IAAI,CAACwB,KAAL,CAAY;;;gBAAZ,EAGT,CAAChB,YAAD,CAHS,CAAvB;AAKA,QAAG,CAACe,IAAI,CAAC,CAAD,CAAR,EAAa,OAAO,IAAP,CAAb,KACK,OAAO,IAAIlB,iBAAJ,CAAsBkB,IAAI,CAAC,CAAD,CAA1B,CAAP;AACN;;AArFsC,CAAzC","sourcesContent":["const pool = require('../utils/pool');\r\nconst CurriculumComment = require('./curriculum-comment');\r\n\r\nmodule.exports = class CurriculumProject {\r\n  curriculum_id;\r\n  title;\r\n  github_link;\r\n  description;\r\n  group;\r\n  cohort;\r\n  tags;\r\n  deployed_back_end;\r\n  deployed_front_end;\r\n\r\n  constructor(row) {\r\n    this.curriculumId = row.curriculum_id,\r\n    this.title = row.title,\r\n    this.githubLink = row.github_link,\r\n    this.description = row.description,\r\n    this.group = row.group,\r\n    this.cohort = row.cohort, \r\n    this.tags = row.tags,\r\n    this.deployedBackEnd = row.deployed_back_end,\r\n    this.deployedFrontEnd = row.deployed_front_end;\r\n  }\r\n\r\n  // Create\r\n  static async insert(project) {\r\n    const { rows } = await pool.query(`\r\n    INSERT INTO curriculum_projects (title, github_link, \"description\", \"group\", cohort, tags, deployed_back_end, deployed_front_end) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *\r\n    `, [project.title, project.githubLink, project.description, project.group, project.cohort, project.tags, project.deployedBackEnd, project.deployedFrontEnd]);\r\n  \r\n    return new CurriculumProject(rows[0]);\r\n  }\r\n  // Read - find()\r\n  static async find() {\r\n    const { rows } = await pool.query(`\r\n    SELECT * FROM curriculum_projects`);\r\n    return rows.map((row) => new CurriculumProject(row));\r\n  }\r\n\r\n  // Read - findById()\r\n  static async findById(id) {\r\n    const { rows } = await pool.query(\r\n      `SELECT curriculum_projects.*, array_to_json(array_agg(curriculum_comments.comment)) AS comments FROM curriculum_projects\r\n        JOIN curriculum_comments\r\n        ON curriculum_comments.curriculum_id=curriculum_projects.curriculum_id\r\n        WHERE curriculum_projects.curriculum_id=$1\r\n        GROUP BY curriculum_projects.curriculum_id`,\r\n      [id]\r\n    );\r\n      \r\n    if(rows[0]){\r\n      const initialReturn = new CurriculumProject(rows[0]);\r\n        \r\n      const comments = rows[0].comments.map(comment => new CurriculumComment(comment));\r\n\r\n      return { ...initialReturn, comments };\r\n    } else {\r\n      const { rows } = await pool.query('SELECT * FROM curriculum_projects WHERE curriculum_projects.curriculum_id=$1', [id]);\r\n      return new CurriculumProject(rows[0]);\r\n    }\r\n  } \r\n\r\n\r\n\r\n  // Update - updateById()\r\n  static async updateById(project, curriculumId) {\r\n    const { rows } = await pool.query(`\r\n    UPDATE curriculum_projects\r\n    SET title=$1, github_link=$2, \"description\"=$3, \"group\"=$4, cohort=$5, tags=$6, deployed_back_end=$7, deployed_front_end=$8\r\n    WHERE curriculum_id=$9\r\n    RETURNING *\r\n    `, [project.title, project.githubLink, project.description, project.group, project.cohort, project.tags, project.deployedBackEnd, project.deployedFrontEnd, curriculumId]);\r\n\r\n    if(!rows[0]) return null;\r\n    else return new CurriculumProject(rows[0]);\r\n  }\r\n\r\n  // Delete - deleteById()\r\n  static async deleteById(curriculumId) {\r\n    const { rows } = await pool.query(`\r\n    DELETE FROM curriculum_projects\r\n    WHERE curriculum_id=$1\r\n    RETURNING *`, [curriculumId]);\r\n\r\n    if(!rows[0]) return null;\r\n    else return new CurriculumProject(rows[0]);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}