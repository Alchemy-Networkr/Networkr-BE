{"ast":null,"code":"var _temp;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst pool = require('../utils/pool');\n\nmodule.exports = (_temp = class CurriculumComment {\n  constructor(comment) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"ownerEmail\", void 0);\n\n    _defineProperty(this, \"comment\", void 0);\n\n    _defineProperty(this, \"curriculumId\", void 0);\n\n    this.id = comment.id;\n    this.ownerEmail = comment.owner_email;\n    this.comment = comment.comment;\n    this.curriculumId = comment.curriculum_id;\n  }\n\n  static async insert(comment) {\n    const {\n      rows\n    } = await pool.query('INSERT INTO curriculum_comments (owner_email, comment, curriculum_id) VALUES ($1, $2, $3) RETURNING *', [comment.ownerEmail, comment.comment, comment.curriculumId]);\n    return new CurriculumComment(rows[0]);\n  }\n\n  static async findAll() {\n    const {\n      rows\n    } = await pool.query('SELECT * FROM curriculum_comments');\n    return rows.map(comment => new CurriculumComment(comment));\n  }\n\n  static async delete(id) {\n    const {\n      rows\n    } = await pool.query('DELETE FROM curriculum_comments WHERE id=$1 RETURNING *', [id]);\n    if (!rows[0]) return null;else return new CurriculumComment(rows[0]);\n  }\n\n  static async update(id, comment) {\n    const {\n      rows\n    } = await pool.query(`\n    UPDATE curriculum_comments\n      SET comment=$1\n      WHERE id=$2\n      RETURNING *\n    `, [comment, id]);\n    return new CurriculumComment(rows[0]);\n  }\n\n}, _temp);","map":{"version":3,"sources":["C:/Users/cuele/alchemy/career-track/Networkr-BE/lib/models/curriculum-comment.js"],"names":["pool","require","module","exports","CurriculumComment","constructor","comment","id","ownerEmail","owner_email","curriculumId","curriculum_id","insert","rows","query","findAll","map","delete","update"],"mappings":";;;;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAApB;;AAEAC,MAAM,CAACC,OAAP,YAAiB,MAAMC,iBAAN,CAAwB;AAMvCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,SAAKC,EAAL,GAAUD,OAAO,CAACC,EAAlB;AACA,SAAKC,UAAL,GAAkBF,OAAO,CAACG,WAA1B;AACA,SAAKH,OAAL,GAAeA,OAAO,CAACA,OAAvB;AACA,SAAKI,YAAL,GAAoBJ,OAAO,CAACK,aAA5B;AACD;;AAED,eAAaC,MAAb,CAAoBN,OAApB,EAA6B;AAE3B,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACc,KAAL,CACrB,uGADqB,EAErB,CAACR,OAAO,CAACE,UAAT,EAAqBF,OAAO,CAACA,OAA7B,EAAsCA,OAAO,CAACI,YAA9C,CAFqB,CAAvB;AAKA,WAAO,IAAIN,iBAAJ,CAAsBS,IAAI,CAAC,CAAD,CAA1B,CAAP;AACD;;AAED,eAAaE,OAAb,GAAsB;AACpB,UAAM;AAAEF,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACc,KAAL,CACrB,mCADqB,CAAvB;AAIA,WAAOD,IAAI,CAACG,GAAL,CAASV,OAAO,IAAI,IAAIF,iBAAJ,CAAsBE,OAAtB,CAApB,CAAP;AACD;;AAED,eAAaW,MAAb,CAAoBV,EAApB,EAAwB;AACtB,UAAM;AAAEM,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACc,KAAL,CACrB,yDADqB,EAErB,CAACP,EAAD,CAFqB,CAAvB;AAKA,QAAG,CAACM,IAAI,CAAC,CAAD,CAAR,EAAa,OAAO,IAAP,CAAb,KACK,OAAO,IAAIT,iBAAJ,CAAsBS,IAAI,CAAC,CAAD,CAA1B,CAAP;AACN;;AAED,eAAaK,MAAb,CAAoBX,EAApB,EAAwBD,OAAxB,EAAiC;AAC/B,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMb,IAAI,CAACc,KAAL,CAAY;;;;;KAAZ,EAKpB,CAACR,OAAD,EAAUC,EAAV,CALoB,CAAvB;AAOA,WAAO,IAAIH,iBAAJ,CAAsBS,IAAI,CAAC,CAAD,CAA1B,CAAP;AACD;;AAlDsC,CAAzC","sourcesContent":["const pool = require('../utils/pool');\r\n\r\nmodule.exports = class CurriculumComment {\r\n  id;\r\n  ownerEmail;\r\n  comment;\r\n  curriculumId;\r\n\r\n  constructor(comment) {\r\n    this.id = comment.id;\r\n    this.ownerEmail = comment.owner_email;\r\n    this.comment = comment.comment;\r\n    this.curriculumId = comment.curriculum_id;\r\n  } \r\n\r\n  static async insert(comment) {\r\n\r\n    const { rows } = await pool.query(\r\n      'INSERT INTO curriculum_comments (owner_email, comment, curriculum_id) VALUES ($1, $2, $3) RETURNING *',\r\n      [comment.ownerEmail, comment.comment, comment.curriculumId]\r\n    );\r\n\r\n    return new CurriculumComment(rows[0]);\r\n  }\r\n\r\n  static async findAll(){\r\n    const { rows } = await pool.query(\r\n      'SELECT * FROM curriculum_comments'\r\n    );\r\n\r\n    return rows.map(comment => new CurriculumComment(comment));\r\n  }\r\n\r\n  static async delete(id) {\r\n    const { rows } = await pool.query(\r\n      'DELETE FROM curriculum_comments WHERE id=$1 RETURNING *',\r\n      [id]\r\n    );\r\n\r\n    if(!rows[0]) return null;\r\n    else return new CurriculumComment(rows[0]);\r\n  }\r\n\r\n  static async update(id, comment) {\r\n    const { rows } = await pool.query(`\r\n    UPDATE curriculum_comments\r\n      SET comment=$1\r\n      WHERE id=$2\r\n      RETURNING *\r\n    `, [comment, id]);\r\n\r\n    return new CurriculumComment(rows[0]);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}