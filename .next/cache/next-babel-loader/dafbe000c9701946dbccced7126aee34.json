{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _temp;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar pool = require('../utils/pool');\n\nvar PortfolioComment = require('./portfolio-comment');\n\nmodule.exports = (_temp = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function PortfolioProject(row) {\n    _classCallCheck(this, PortfolioProject);\n\n    _defineProperty(this, \"portfolioId\", void 0);\n\n    _defineProperty(this, \"ownerEmail\", void 0);\n\n    _defineProperty(this, \"title\", void 0);\n\n    _defineProperty(this, \"primaryLanguage\", void 0);\n\n    _defineProperty(this, \"date\", void 0);\n\n    _defineProperty(this, \"githubLink\", void 0);\n\n    _defineProperty(this, \"description\", void 0);\n\n    _defineProperty(this, \"collaborators\", void 0);\n\n    _defineProperty(this, \"open\", void 0);\n\n    this.portfolioId = row.portfolio_id;\n    this.ownerEmail = row.owner_email;\n    this.title = row.title;\n    this.primaryLanguage = row.primary_language;\n    this.date = row.date;\n    this.githubLink = row.github_link;\n    this.description = row.description;\n    this.collaborators = row.collaborators;\n    this.open = row.open;\n  }\n\n  _createClass(PortfolioProject, null, [{\n    key: \"insert\",\n    value: function () {\n      var _insert = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(project) {\n        var _yield$pool$query, rows;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return pool.query('INSERT INTO portfolio_projects (owner_email, title, primary_language, \"date\", github_link, \"description\", collaborators, \"open\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *', [project.ownerEmail, project.title, project.primaryLanguage, project.date, project.githubLink, project.description, project.collaborators, project.open]);\n\n              case 2:\n                _yield$pool$query = _context.sent;\n                rows = _yield$pool$query.rows;\n                return _context.abrupt(\"return\", new PortfolioProject(rows[0]));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function insert(_x) {\n        return _insert.apply(this, arguments);\n      }\n\n      return insert;\n    }()\n  }, {\n    key: \"findById\",\n    value: function () {\n      var _findById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n        var _yield$pool$query2, rows, initialReturn, comments, _yield$pool$query3, _rows;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return pool.query(\"SELECT portfolio_projects.*, array_to_json(array_agg(portfolio_comments.comment)) AS comments FROM portfolio_projects\\n        JOIN portfolio_comments\\n        ON portfolio_comments.portfolio_id=portfolio_projects.portfolio_id\\n        WHERE portfolio_projects.portfolio_id=$1\\n        GROUP BY portfolio_projects.portfolio_id\", [id]);\n\n              case 2:\n                _yield$pool$query2 = _context2.sent;\n                rows = _yield$pool$query2.rows;\n\n                if (!rows[0]) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                initialReturn = new PortfolioProject(rows[0]);\n                comments = rows[0].comments.map(function (comment) {\n                  return new PortfolioComment(comment);\n                });\n                return _context2.abrupt(\"return\", _objectSpread(_objectSpread({}, initialReturn), {}, {\n                  comments: comments\n                }));\n\n              case 10:\n                _context2.next = 12;\n                return pool.query('SELECT * FROM portfolio_projects WHERE portfolio_projects.portfolio_id=$1', [id]);\n\n              case 12:\n                _yield$pool$query3 = _context2.sent;\n                _rows = _yield$pool$query3.rows;\n                return _context2.abrupt(\"return\", new PortfolioProject(_rows[0]));\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function findById(_x2) {\n        return _findById.apply(this, arguments);\n      }\n\n      return findById;\n    }()\n  }, {\n    key: \"find\",\n    value: function () {\n      var _find = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _yield$pool$query4, rows;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return pool.query('SELECT * FROM portfolio_projects');\n\n              case 2:\n                _yield$pool$query4 = _context3.sent;\n                rows = _yield$pool$query4.rows;\n                return _context3.abrupt(\"return\", rows.map(function (row) {\n                  return new PortfolioProject(row);\n                }));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function find() {\n        return _find.apply(this, arguments);\n      }\n\n      return find;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id) {\n        var _yield$pool$query5, rows;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return pool.query('DELETE FROM portfolio_projects WHERE portfolio_id=$1 RETURNING *', [id]);\n\n              case 2:\n                _yield$pool$query5 = _context4.sent;\n                rows = _yield$pool$query5.rows;\n                return _context4.abrupt(\"return\", new PortfolioProject(rows[0]));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function _delete(_x3) {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }()\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(id, updatedProject) {\n        var _yield$pool$query6, rows;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return pool.query(\"UPDATE portfolio_projects \\n          SET title=$1, \\n              primary_language=$2,\\n              github_link=$3,\\n              \\\"description\\\"=$4,\\n              collaborators=$5,\\n              \\\"open\\\"=$6\\n          WHERE portfolio_id=$7\\n          RETURNING *\", [updatedProject.title, updatedProject.primaryLanguage, updatedProject.githubLink, updatedProject.description, updatedProject.collaborators, updatedProject.open, id]);\n\n              case 2:\n                _yield$pool$query6 = _context5.sent;\n                rows = _yield$pool$query6.rows;\n                return _context5.abrupt(\"return\", new PortfolioProject(rows[0]));\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function update(_x4, _x5) {\n        return _update.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  }]);\n\n  return PortfolioProject;\n}(), _temp);","map":{"version":3,"sources":["C:/Users/cuele/alchemy/career-track/Networkr-BE/lib/models/portfolio-model.js"],"names":["pool","require","PortfolioComment","module","exports","row","portfolioId","portfolio_id","ownerEmail","owner_email","title","primaryLanguage","primary_language","date","githubLink","github_link","description","collaborators","open","project","query","rows","PortfolioProject","id","initialReturn","comments","map","comment","updatedProject"],"mappings":"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","sourcesContent":["const pool = require('../utils/pool');\r\nconst PortfolioComment = require('./portfolio-comment');\r\n\r\nmodule.exports = class PortfolioProject {\r\n    portfolioId;\r\n    ownerEmail;\r\n    title;\r\n    primaryLanguage;\r\n    date;\r\n    githubLink;\r\n    description;\r\n    collaborators;\r\n    open;\r\n\r\n    constructor(row) {\r\n      this.portfolioId = row.portfolio_id;\r\n      this.ownerEmail = row.owner_email;\r\n      this.title = row.title;\r\n      this.primaryLanguage = row.primary_language;\r\n      this.date = row.date;\r\n      this.githubLink = row.github_link;\r\n      this.description = row.description;\r\n      this.collaborators = row.collaborators;\r\n      this.open = row.open;\r\n      \r\n    }\r\n\r\n    static async insert(project) {\r\n      const { rows } = await pool.query(\r\n        'INSERT INTO portfolio_projects (owner_email, title, primary_language, \"date\", github_link, \"description\", collaborators, \"open\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING *', [project.ownerEmail, project.title, project.primaryLanguage, project.date, project.githubLink, project.description, project.collaborators, project.open]\r\n      );\r\n\r\n      return new PortfolioProject(rows[0]);\r\n    }\r\n\r\n    static async findById(id) {\r\n      const { rows } = await pool.query(\r\n        `SELECT portfolio_projects.*, array_to_json(array_agg(portfolio_comments.comment)) AS comments FROM portfolio_projects\r\n        JOIN portfolio_comments\r\n        ON portfolio_comments.portfolio_id=portfolio_projects.portfolio_id\r\n        WHERE portfolio_projects.portfolio_id=$1\r\n        GROUP BY portfolio_projects.portfolio_id`,\r\n        [id]\r\n      );\r\n      \r\n      if(rows[0]){\r\n        const initialReturn = new PortfolioProject(rows[0]);\r\n        \r\n        const comments = rows[0].comments.map(comment => new PortfolioComment(comment));\r\n\r\n        return { ...initialReturn, comments };\r\n      } else {\r\n        const { rows } = await pool.query('SELECT * FROM portfolio_projects WHERE portfolio_projects.portfolio_id=$1', [id]);\r\n        return new PortfolioProject(rows[0]);\r\n      }\r\n    } \r\n\r\n    static async find() {\r\n      const { rows } = await pool.query(\r\n        'SELECT * FROM portfolio_projects'\r\n      );\r\n\r\n      return rows.map(row => new PortfolioProject(row));\r\n    }\r\n\r\n    static async delete(id) {\r\n      const { rows } = await pool.query(\r\n        'DELETE FROM portfolio_projects WHERE portfolio_id=$1 RETURNING *',\r\n        [id]\r\n      );\r\n\r\n      return new PortfolioProject(rows[0]);\r\n    }\r\n\r\n    static async update(id, updatedProject) {\r\n      const { rows } = await pool.query(\r\n        `UPDATE portfolio_projects \r\n          SET title=$1, \r\n              primary_language=$2,\r\n              github_link=$3,\r\n              \"description\"=$4,\r\n              collaborators=$5,\r\n              \"open\"=$6\r\n          WHERE portfolio_id=$7\r\n          RETURNING *`,\r\n        [updatedProject.title, updatedProject.primaryLanguage, updatedProject.githubLink, updatedProject.description, updatedProject.collaborators, updatedProject.open, id]\r\n      );\r\n\r\n      return new PortfolioProject(rows[0]);\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}